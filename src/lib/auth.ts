import type { DefaultSession, NextAuthOptions } from "next-auth";
import { PrismaAdapter } from "@auth/prisma-adapter";
import { db } from "@/lib/prisma";
import GitHubProvider from "next-auth/providers/github";
import GoogleProvider from "next-auth/providers/google";
import { Adapter } from "next-auth/adapters";
import { nanoid } from "nanoid";

declare module "next-auth" {
  interface Session extends DefaultSession {
    user: DefaultSession["user"] & User;
  }

  interface User {
    id: string;
    username: string;
  }
}

export const authOptions = {
  secret: process.env.NEXTAUTH_SECRET,
  adapter: PrismaAdapter(db) as Adapter,
  providers: [
    GitHubProvider({
      clientId: process.env.GITHUB_ID!,
      clientSecret: process.env.GITHUB_SECRET!,
    }),
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
  ],
  events: {
    async signIn({ user, isNewUser }) {
      if (isNewUser) {
        const autoGeneratedId = nanoid(10).toUpperCase();

        await db.user.update({
          where: {
            id: Number(user.id),
          },
          data: {
            username: "user" + autoGeneratedId,
          },
        });
      }
    },
  },
  callbacks: {
    async session({ session, user }) {
      session = {
        ...session,
        user: {
          ...session.user,
          id: user.id,
          username: user.username,
        },
      };
      return session;
    },
  },
  pages: {
    signIn: "/login",
  },
} satisfies NextAuthOptions;
